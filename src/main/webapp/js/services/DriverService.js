'use strict';/** * Service that persists and retrieves drivers. */service.factory('driverService', function (persistenceService) {    return {        /**         * Retrieves list of all drivers         * @param callback, with list of all drivers as param         */        getDrivers: function (callback) {            Driver.all().order('surname', true).order('name', true).list(function (drivers) {                callback(drivers);            });        },        /**         * Saves given driver into the database         * @param driver         * @param callback, which is called when data are flushed         */        save: function (driver, callback) {            if (driver.id != null) {                Driver.load(driver.id, function (oldDriver) {                    oldDriver.name = driver.name;                    oldDriver.surname = driver.surname;                    persistenceService.flush(function () {                        if (callback) callback();                    });                });            } else {                persistenceService.add(new Driver(driver));                persistenceService.flush(function () {                    if (callback) callback();                });            }        },        /**         * Deletes given driver from the database         * @param driver         * @param callback, which is called when data are flushed         */        delete: function (driver, callback) {            Season.load(driver.id, function (oldDriver) {                persistenceService.remove(oldDriver);                persistenceService.flush(function () {                    if (callback) callback();                });            });        }    };});